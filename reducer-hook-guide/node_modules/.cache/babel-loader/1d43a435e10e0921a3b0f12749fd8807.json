{"ast":null,"code":"var _jsxFileName = \"G:\\\\Coding\\\\Projects_Main\\\\Beginner\\\\Udemy-React\\\\reducer-hook-guide\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\"; // const emailReducer = (state, action) => {\n//   if (action.type === \"USER_INPUT\") {\n//     return { value: action.val, isValid: action.val.includes(\"@\") };\n//   }\n//   if (action.type === \" INPUT_BLUR\") {\n//     return { value: state.value, isValid: state.value.includes(\"@\") };\n//   }\n//   return { value: \"\", isValid: false };\n// };\n// const passwordReducer = (state, action) => {\n//   if (action.type === \"USER_INPUT\") {\n//     return { value: action.val, isValid: action.val.trim().length > 6 };\n//   }\n//   if (action.type === \" INPUT_BLUR\") {\n//     return { value: state.value, isValid: state.value.trim().length > 6 };\n//   }\n//   return { value: \"\", isValid: false };\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null\n  }); // useEffect(() => {\n  //   console.log(\"EFFECT RUNNING\");\n  //   return () => {\n  //     console.log(\"EFFECT CLEANUP\");\n  //   };\n  // }, []);\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState; // the above code will stop further input in the fields once the \n  // user has finished typing\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n    return () => {\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); // setEnteredEmail(event.target.value);\n    //   setFormIsValid(\n    //     event.target.value.includes(\"@\") && passwordState.isValid\n    //   );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); // setEnteredPassword(event.target.value);\n\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    }); // setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: \"INPUT_BLUR\"\n    }); // setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"sXA87IfWTBz9hUxthjOp6XnFWmQ=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["G:/Coding/Projects_Main/Beginner/Udemy-React/reducer-hook-guide/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","emailReducer","value","isValid","passwordState","dispatchPassword","passwordReducer","emailIsValid","passwordIsValid","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","type","val","target","passwordChangeHandler","trim","length","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB;AACA;AACA;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BT,UAAU,CAACU,YAAD,EAAe;AAC3DC,IAAAA,KAAK,EAAE,EADoD;AAE3DC,IAAAA,OAAO,EAAE;AAFkD,GAAf,CAA9C;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,UAAU,CAACe,eAAD,EAAkB;AACpEJ,IAAAA,KAAK,EAAE,EAD6D;AAEpEC,IAAAA,OAAO,EAAE;AAF2D,GAAlB,CAApD,CAZuB,CAiBvB;AACA;AAEA;AACA;AACA;AACA;;AAEA,QAAM;AAAEA,IAAAA,OAAO,EAAEI;AAAX,MAA4BR,UAAlC;AACA,QAAM;AAAEI,IAAAA,OAAO,EAAEK;AAAX,MAA+BJ,aAArC,CA1BuB,CA2BvB;AACA;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,UAAU,GAAGC,UAAU,CAAC,MAAM;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAd,MAAAA,cAAc,CAACS,YAAY,IAAIC,eAAjB,CAAd;AACD,KAH4B,EAG1B,GAH0B,CAA7B;AAKA,WAAO,MAAM;AACXG,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAC,MAAAA,YAAY,CAACJ,UAAD,CAAZ;AACD,KAHD;AAID,GAVQ,EAUN,CAACF,YAAD,EAAeC,eAAf,CAVM,CAAT;;AAYA,QAAMM,kBAAkB,GAAIC,KAAD,IAAW;AACpCf,IAAAA,aAAa,CAAC;AAAEgB,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,GAAG,EAAEF,KAAK,CAACG,MAAN,CAAahB;AAAxC,KAAD,CAAb,CADoC,CAEpC;AAEA;AACA;AACA;AACD,GAPD;;AASA,QAAMiB,qBAAqB,GAAIJ,KAAD,IAAW;AACvCV,IAAAA,gBAAgB,CAAC;AAAEW,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,GAAG,EAAEF,KAAK,CAACG,MAAN,CAAahB;AAAxC,KAAD,CAAhB,CADuC,CAEvC;;AAEAJ,IAAAA,cAAc,CAACC,UAAU,CAACI,OAAX,IAAsBY,KAAK,CAACG,MAAN,CAAahB,KAAb,CAAmBkB,IAAnB,GAA0BC,MAA1B,GAAmC,CAA1D,CAAd;AACD,GALD;;AAOA,QAAMC,oBAAoB,GAAG,MAAM;AACjCtB,IAAAA,aAAa,CAAC;AAAEgB,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAb,CADiC,CAEjC;AACD,GAHD;;AAKA,QAAMO,uBAAuB,GAAG,MAAM;AACpClB,IAAAA,gBAAgB,CAAC;AAAEW,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAhB,CADoC,CAEpC;AACD,GAHD;;AAKA,QAAMQ,aAAa,GAAIT,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACU,cAAN;AACA7B,IAAAA,KAAK,CAAC8B,OAAN,CAAc3B,UAAU,CAACG,KAAzB,EAAgCE,aAAa,CAACF,KAA9C;AACD,GAHD;;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAET,OAAO,CAACkC,KAAzB;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEH,aAAhB;AAAA,8BACE;AACE,QAAA,SAAS,EAAG,GAAE/B,OAAO,CAACmC,OAAQ,IAC5B7B,UAAU,CAACI,OAAX,KAAuB,KAAvB,GAA+BV,OAAO,CAACoC,OAAvC,GAAiD,EAClD,EAHH;AAAA,gCAKE;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,EAAE,EAAC,OAFL;AAGE,UAAA,KAAK,EAAE9B,UAAU,CAACG,KAHpB;AAIE,UAAA,QAAQ,EAAEY,kBAJZ;AAKE,UAAA,MAAM,EAAEQ;AALV;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAeE;AACE,QAAA,SAAS,EAAG,GAAE7B,OAAO,CAACmC,OAAQ,IAC5BxB,aAAa,CAACD,OAAd,KAA0B,KAA1B,GAAkCV,OAAO,CAACoC,OAA1C,GAAoD,EACrD,EAHH;AAAA,gCAKE;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,EAAE,EAAC,UAFL;AAGE,UAAA,KAAK,EAAEzB,aAAa,CAACF,KAHvB;AAIE,UAAA,QAAQ,EAAEiB,qBAJZ;AAKE,UAAA,MAAM,EAAEI;AALV;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eA6BE;AAAK,QAAA,SAAS,EAAE9B,OAAO,CAACqC,OAAxB;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAErC,OAAO,CAACsC,GAAzC;AAA8C,UAAA,QAAQ,EAAE,CAAClC,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CAhHD;;GAAMF,K;;KAAAA,K;AAkHN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\n// const emailReducer = (state, action) => {\n//   if (action.type === \"USER_INPUT\") {\n//     return { value: action.val, isValid: action.val.includes(\"@\") };\n//   }\n//   if (action.type === \" INPUT_BLUR\") {\n//     return { value: state.value, isValid: state.value.includes(\"@\") };\n//   }\n//   return { value: \"\", isValid: false };\n// };\n\n// const passwordReducer = (state, action) => {\n//   if (action.type === \"USER_INPUT\") {\n//     return { value: action.val, isValid: action.val.trim().length > 6 };\n//   }\n//   if (action.type === \" INPUT_BLUR\") {\n//     return { value: state.value, isValid: state.value.trim().length > 6 };\n//   }\n//   return { value: \"\", isValid: false };\n// };\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  // useEffect(() => {\n  //   console.log(\"EFFECT RUNNING\");\n\n  //   return () => {\n  //     console.log(\"EFFECT CLEANUP\");\n  //   };\n  // }, []);\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n  // the above code will stop further input in the fields once the \n  // user has finished typing\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n\n    return () => {\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n    // setEnteredEmail(event.target.value);\n\n    //   setFormIsValid(\n    //     event.target.value.includes(\"@\") && passwordState.isValid\n    //   );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n    // setEnteredPassword(event.target.value);\n\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n    // setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({ type: \"INPUT_BLUR\" });\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}