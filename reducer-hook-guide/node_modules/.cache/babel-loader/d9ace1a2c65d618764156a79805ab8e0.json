{"ast":null,"code":"var _jsxFileName = \"G:\\\\Coding\\\\Projects_Main\\\\Beginner\\\\Udemy-React\\\\reducer-hook-guide\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\"; // when to use useReducer() - use this when a state update relies\n// on another state update, this is because React schedules state\n// updates in a way that the target state could run after the state\n// that is checking it, therefore incorrect information will be\n// retrieved. see login.js\n// example of useReducer()\n// const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);\n// state is the latest state snapshot\n// dispatchFn is a function that can be used to dispatch a new action, trigger an update\n// reducerFn gets the latest state snapshot and the action that was despatched => returns the newState\n// initialState sets the default initial state you want to run\n// initFn a function to set the initial state programatically\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const ctx = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["G:/Coding/Projects_Main/Beginner/Udemy-React/reducer-hook-guide/src/App.js"],"names":["React","useContext","Login","Home","MainHeader","AuthContext","App","ctx","isLoggedIn","loginHandler","logoutHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,GAAG,GAAGN,UAAU,CAACI,WAAD,CAAtB;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACG,CAACG,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEC;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGD,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEE;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAZQJ,G;;KAAAA,G;AAcT,eAAeA,GAAf","sourcesContent":["import React, { useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n\n// when to use useReducer() - use this when a state update relies\n// on another state update, this is because React schedules state\n// updates in a way that the target state could run after the state\n// that is checking it, therefore incorrect information will be\n// retrieved. see login.js\n// example of useReducer()\n// const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);\n// state is the latest state snapshot\n// dispatchFn is a function that can be used to dispatch a new action, trigger an update\n// reducerFn gets the latest state snapshot and the action that was despatched => returns the newState\n// initialState sets the default initial state you want to run\n// initFn a function to set the initial state programatically\n\nfunction App() {\n  const ctx = useContext(AuthContext);\n\n  return (\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}